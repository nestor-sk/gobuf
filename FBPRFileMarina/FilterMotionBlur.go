// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FilterMotionBlur struct {
	_tab flatbuffers.Table
}

func GetRootAsFilterMotionBlur(buf []byte, offset flatbuffers.UOffsetT) *FilterMotionBlur {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FilterMotionBlur{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFilterMotionBlur(buf []byte, offset flatbuffers.UOffsetT) *FilterMotionBlur {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FilterMotionBlur{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FilterMotionBlur) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FilterMotionBlur) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FilterMotionBlur) Radius() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *FilterMotionBlur) MutateRadius(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *FilterMotionBlur) Angle() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *FilterMotionBlur) MutateAngle(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func FilterMotionBlurStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func FilterMotionBlurAddRadius(builder *flatbuffers.Builder, radius float32) {
	builder.PrependFloat32Slot(0, radius, 0.0)
}
func FilterMotionBlurAddAngle(builder *flatbuffers.Builder, angle float32) {
	builder.PrependFloat32Slot(1, angle, 0.0)
}
func FilterMotionBlurEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
