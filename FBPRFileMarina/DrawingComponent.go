// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DrawingComponent struct {
	_tab flatbuffers.Table
}

func GetRootAsDrawingComponent(buf []byte, offset flatbuffers.UOffsetT) *DrawingComponent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DrawingComponent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDrawingComponent(buf []byte, offset flatbuffers.UOffsetT) *DrawingComponent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DrawingComponent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DrawingComponent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DrawingComponent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DrawingComponent) ContentType() DrawingContent {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return DrawingContent(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DrawingComponent) MutateContentType(n DrawingContent) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *DrawingComponent) Content(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *DrawingComponent) Mask(obj *DrawingMask) *DrawingMask {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DrawingMask)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DrawingComponentStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DrawingComponentAddContentType(builder *flatbuffers.Builder, contentType DrawingContent) {
	builder.PrependByteSlot(0, byte(contentType), 0)
}
func DrawingComponentAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(content), 0)
}
func DrawingComponentAddMask(builder *flatbuffers.Builder, mask flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(mask), 0)
}
func DrawingComponentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
