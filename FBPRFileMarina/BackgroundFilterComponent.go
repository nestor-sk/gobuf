// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BackgroundFilterComponent struct {
	_tab flatbuffers.Table
}

func GetRootAsBackgroundFilterComponent(buf []byte, offset flatbuffers.UOffsetT) *BackgroundFilterComponent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BackgroundFilterComponent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBackgroundFilterComponent(buf []byte, offset flatbuffers.UOffsetT) *BackgroundFilterComponent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BackgroundFilterComponent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BackgroundFilterComponent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BackgroundFilterComponent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BackgroundFilterComponent) ShapeType() Shape {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Shape(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BackgroundFilterComponent) MutateShapeType(n Shape) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *BackgroundFilterComponent) Shape(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *BackgroundFilterComponent) Image(obj *ImageDrawing) *ImageDrawing {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ImageDrawing)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *BackgroundFilterComponent) Radius() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *BackgroundFilterComponent) MutateRadius(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *BackgroundFilterComponent) Saturation() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 1.0
}

func (rcv *BackgroundFilterComponent) MutateSaturation(n float32) bool {
	return rcv._tab.MutateFloat32Slot(12, n)
}

func BackgroundFilterComponentStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func BackgroundFilterComponentAddShapeType(builder *flatbuffers.Builder, shapeType Shape) {
	builder.PrependByteSlot(0, byte(shapeType), 0)
}
func BackgroundFilterComponentAddShape(builder *flatbuffers.Builder, shape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(shape), 0)
}
func BackgroundFilterComponentAddImage(builder *flatbuffers.Builder, image flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(image), 0)
}
func BackgroundFilterComponentAddRadius(builder *flatbuffers.Builder, radius float32) {
	builder.PrependFloat32Slot(3, radius, 0.0)
}
func BackgroundFilterComponentAddSaturation(builder *flatbuffers.Builder, saturation float32) {
	builder.PrependFloat32Slot(4, saturation, 1.0)
}
func BackgroundFilterComponentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
