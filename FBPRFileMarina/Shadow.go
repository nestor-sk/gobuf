// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Shadow struct {
	_tab flatbuffers.Table
}

func GetRootAsShadow(buf []byte, offset flatbuffers.UOffsetT) *Shadow {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Shadow{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsShadow(buf []byte, offset flatbuffers.UOffsetT) *Shadow {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Shadow{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Shadow) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Shadow) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Shadow) Radius() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Shadow) MutateRadius(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *Shadow) Offset(obj *Size) *Size {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Size)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Shadow) Spread() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Shadow) MutateSpread(n float32) bool {
	return rcv._tab.MutateFloat32Slot(8, n)
}

func (rcv *Shadow) Color(obj *RGBAColor) *RGBAColor {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(RGBAColor)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ShadowStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ShadowAddRadius(builder *flatbuffers.Builder, radius float32) {
	builder.PrependFloat32Slot(0, radius, 0.0)
}
func ShadowAddOffset(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.PrependStructSlot(1, flatbuffers.UOffsetT(offset), 0)
}
func ShadowAddSpread(builder *flatbuffers.Builder, spread float32) {
	builder.PrependFloat32Slot(2, spread, 0.0)
}
func ShadowAddColor(builder *flatbuffers.Builder, color flatbuffers.UOffsetT) {
	builder.PrependStructSlot(3, flatbuffers.UOffsetT(color), 0)
}
func ShadowEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
