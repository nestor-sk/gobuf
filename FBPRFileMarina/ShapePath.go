// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ShapePath struct {
	_tab flatbuffers.Table
}

func GetRootAsShapePath(buf []byte, offset flatbuffers.UOffsetT) *ShapePath {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ShapePath{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsShapePath(buf []byte, offset flatbuffers.UOffsetT) *ShapePath {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ShapePath{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ShapePath) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ShapePath) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ShapePath) Path(obj *Path) *Path {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Path)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ShapePath) FillRule() FillRule {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return FillRule(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShapePath) MutateFillRule(n FillRule) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func ShapePathStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ShapePathAddPath(builder *flatbuffers.Builder, path flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(path), 0)
}
func ShapePathAddFillRule(builder *flatbuffers.Builder, fillRule FillRule) {
	builder.PrependInt8Slot(1, int8(fillRule), 0)
}
func ShapePathEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
