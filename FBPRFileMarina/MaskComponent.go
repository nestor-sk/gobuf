// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MaskComponent struct {
	_tab flatbuffers.Table
}

func GetRootAsMaskComponent(buf []byte, offset flatbuffers.UOffsetT) *MaskComponent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MaskComponent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMaskComponent(buf []byte, offset flatbuffers.UOffsetT) *MaskComponent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MaskComponent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MaskComponent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MaskComponent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MaskComponent) Mode() MaskComponentMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return MaskComponentMode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MaskComponent) MutateMode(n MaskComponentMode) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *MaskComponent) ClipShapeType() Shape {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Shape(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *MaskComponent) MutateClipShapeType(n Shape) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *MaskComponent) ClipShape(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *MaskComponent) Node(obj *Node) *Node {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Node)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MaskComponent) KnockoutRect(obj *Rect) *Rect {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Rect)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MaskComponentStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MaskComponentAddMode(builder *flatbuffers.Builder, mode MaskComponentMode) {
	builder.PrependInt8Slot(0, int8(mode), 0)
}
func MaskComponentAddClipShapeType(builder *flatbuffers.Builder, clipShapeType Shape) {
	builder.PrependByteSlot(1, byte(clipShapeType), 0)
}
func MaskComponentAddClipShape(builder *flatbuffers.Builder, clipShape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(clipShape), 0)
}
func MaskComponentAddNode(builder *flatbuffers.Builder, node flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(node), 0)
}
func MaskComponentAddKnockoutRect(builder *flatbuffers.Builder, knockoutRect flatbuffers.UOffsetT) {
	builder.PrependStructSlot(4, flatbuffers.UOffsetT(knockoutRect), 0)
}
func MaskComponentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
