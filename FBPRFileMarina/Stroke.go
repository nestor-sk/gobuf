// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Stroke struct {
	_tab flatbuffers.Table
}

func GetRootAsStroke(buf []byte, offset flatbuffers.UOffsetT) *Stroke {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Stroke{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStroke(buf []byte, offset flatbuffers.UOffsetT) *Stroke {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Stroke{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Stroke) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Stroke) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Stroke) LineWidth() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Stroke) MutateLineWidth(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *Stroke) LineCap() LineCap {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return LineCap(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Stroke) MutateLineCap(n LineCap) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *Stroke) LineJoin() LineJoin {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return LineJoin(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Stroke) MutateLineJoin(n LineJoin) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *Stroke) LineDashPhase() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Stroke) MutateLineDashPhase(n float32) bool {
	return rcv._tab.MutateFloat32Slot(10, n)
}

func (rcv *Stroke) LineDashPattern(j int) float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetFloat32(a + flatbuffers.UOffsetT(j*4))
	}
	return 0
}

func (rcv *Stroke) LineDashPatternLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Stroke) MutateLineDashPattern(j int, n float32) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateFloat32(a+flatbuffers.UOffsetT(j*4), n)
	}
	return false
}

func (rcv *Stroke) MiterLimit() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 10.0
}

func (rcv *Stroke) MutateMiterLimit(n float32) bool {
	return rcv._tab.MutateFloat32Slot(14, n)
}

func StrokeStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func StrokeAddLineWidth(builder *flatbuffers.Builder, lineWidth float32) {
	builder.PrependFloat32Slot(0, lineWidth, 0.0)
}
func StrokeAddLineCap(builder *flatbuffers.Builder, lineCap LineCap) {
	builder.PrependInt8Slot(1, int8(lineCap), 0)
}
func StrokeAddLineJoin(builder *flatbuffers.Builder, lineJoin LineJoin) {
	builder.PrependInt8Slot(2, int8(lineJoin), 0)
}
func StrokeAddLineDashPhase(builder *flatbuffers.Builder, lineDashPhase float32) {
	builder.PrependFloat32Slot(3, lineDashPhase, 0.0)
}
func StrokeAddLineDashPattern(builder *flatbuffers.Builder, lineDashPattern flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(lineDashPattern), 0)
}
func StrokeStartLineDashPatternVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StrokeAddMiterLimit(builder *flatbuffers.Builder, miterLimit float32) {
	builder.PrependFloat32Slot(5, miterLimit, 10.0)
}
func StrokeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
