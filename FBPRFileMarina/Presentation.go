// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Presentation struct {
	_tab flatbuffers.Table
}

func GetRootAsPresentation(buf []byte, offset flatbuffers.UOffsetT) *Presentation {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Presentation{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPresentation(buf []byte, offset flatbuffers.UOffsetT) *Presentation {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Presentation{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Presentation) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Presentation) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Presentation) Images(obj *Image, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Presentation) ImagesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Presentation) Root(obj *Node) *Node {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Node)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// The semver of the sketch-presentation-file-format
/// package used to generate the file. Do not remove or alter
/// this root field in future schema versions, it will be used by
/// clients to determine compatibility.
func (rcv *Presentation) SchemaVersion() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// The semver of the sketch-presentation-file-format
/// package used to generate the file. Do not remove or alter
/// this root field in future schema versions, it will be used by
/// clients to determine compatibility.
func PresentationStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PresentationAddImages(builder *flatbuffers.Builder, images flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(images), 0)
}
func PresentationStartImagesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PresentationAddRoot(builder *flatbuffers.Builder, root flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(root), 0)
}
func PresentationAddSchemaVersion(builder *flatbuffers.Builder, schemaVersion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(schemaVersion), 0)
}
func PresentationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
