// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BlendComponent struct {
	_tab flatbuffers.Table
}

func GetRootAsBlendComponent(buf []byte, offset flatbuffers.UOffsetT) *BlendComponent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BlendComponent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBlendComponent(buf []byte, offset flatbuffers.UOffsetT) *BlendComponent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BlendComponent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BlendComponent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BlendComponent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BlendComponent) Mode() BlendMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return BlendMode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *BlendComponent) MutateMode(n BlendMode) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *BlendComponent) Opacity() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 1.0
}

func (rcv *BlendComponent) MutateOpacity(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func BlendComponentStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BlendComponentAddMode(builder *flatbuffers.Builder, mode BlendMode) {
	builder.PrependInt8Slot(0, int8(mode), 0)
}
func BlendComponentAddOpacity(builder *flatbuffers.Builder, opacity float32) {
	builder.PrependFloat32Slot(1, opacity, 1.0)
}
func BlendComponentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
