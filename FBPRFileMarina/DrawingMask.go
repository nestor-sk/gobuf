// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DrawingMask struct {
	_tab flatbuffers.Table
}

func GetRootAsDrawingMask(buf []byte, offset flatbuffers.UOffsetT) *DrawingMask {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DrawingMask{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDrawingMask(buf []byte, offset flatbuffers.UOffsetT) *DrawingMask {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DrawingMask{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DrawingMask) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DrawingMask) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DrawingMask) Mode() DrawingMaskMode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return DrawingMaskMode(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DrawingMask) MutateMode(n DrawingMaskMode) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *DrawingMask) ShapeType() Shape {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Shape(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DrawingMask) MutateShapeType(n Shape) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *DrawingMask) Shape(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func (rcv *DrawingMask) Stroke(obj *Stroke) *Stroke {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Stroke)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Stroked version of shape, so web renderer can use without needing to perform stroking
func (rcv *DrawingMask) StrokedPath(obj *Path) *Path {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Path)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Stroked version of shape, so web renderer can use without needing to perform stroking
func (rcv *DrawingMask) KnockoutRect(obj *Rect) *Rect {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(Rect)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DrawingMaskStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func DrawingMaskAddMode(builder *flatbuffers.Builder, mode DrawingMaskMode) {
	builder.PrependInt8Slot(0, int8(mode), 0)
}
func DrawingMaskAddShapeType(builder *flatbuffers.Builder, shapeType Shape) {
	builder.PrependByteSlot(1, byte(shapeType), 0)
}
func DrawingMaskAddShape(builder *flatbuffers.Builder, shape flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(shape), 0)
}
func DrawingMaskAddStroke(builder *flatbuffers.Builder, stroke flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(stroke), 0)
}
func DrawingMaskAddStrokedPath(builder *flatbuffers.Builder, strokedPath flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(strokedPath), 0)
}
func DrawingMaskAddKnockoutRect(builder *flatbuffers.Builder, knockoutRect flatbuffers.UOffsetT) {
	builder.PrependStructSlot(5, flatbuffers.UOffsetT(knockoutRect), 0)
}
func DrawingMaskEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
