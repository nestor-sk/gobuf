// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SurfaceComponent struct {
	_tab flatbuffers.Table
}

func GetRootAsSurfaceComponent(buf []byte, offset flatbuffers.UOffsetT) *SurfaceComponent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SurfaceComponent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSurfaceComponent(buf []byte, offset flatbuffers.UOffsetT) *SurfaceComponent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SurfaceComponent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SurfaceComponent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SurfaceComponent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SurfaceComponent) ShouldBlendSourceOver() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SurfaceComponent) MutateShouldBlendSourceOver(n bool) bool {
	return rcv._tab.MutateBoolSlot(4, n)
}

func (rcv *SurfaceComponent) FilterType() Filter {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Filter(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SurfaceComponent) MutateFilterType(n Filter) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *SurfaceComponent) Filter(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func SurfaceComponentStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SurfaceComponentAddShouldBlendSourceOver(builder *flatbuffers.Builder, shouldBlendSourceOver bool) {
	builder.PrependBoolSlot(0, shouldBlendSourceOver, false)
}
func SurfaceComponentAddFilterType(builder *flatbuffers.Builder, filterType Filter) {
	builder.PrependByteSlot(1, byte(filterType), 0)
}
func SurfaceComponentAddFilter(builder *flatbuffers.Builder, filter flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(filter), 0)
}
func SurfaceComponentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
