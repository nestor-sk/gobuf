// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package FBPRFileMarina

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Image struct {
	_tab flatbuffers.Table
}

func GetRootAsImage(buf []byte, offset flatbuffers.UOffsetT) *Image {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Image{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsImage(buf []byte, offset flatbuffers.UOffsetT) *Image {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Image{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Image) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Image) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Image) Uuid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Image) Width() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Image) MutateWidth(n uint32) bool {
	return rcv._tab.MutateUint32Slot(6, n)
}

func (rcv *Image) Height() uint32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Image) MutateHeight(n uint32) bool {
	return rcv._tab.MutateUint32Slot(8, n)
}

func (rcv *Image) Format() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ImageStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ImageAddUuid(builder *flatbuffers.Builder, uuid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(uuid), 0)
}
func ImageAddWidth(builder *flatbuffers.Builder, width uint32) {
	builder.PrependUint32Slot(1, width, 0)
}
func ImageAddHeight(builder *flatbuffers.Builder, height uint32) {
	builder.PrependUint32Slot(2, height, 0)
}
func ImageAddFormat(builder *flatbuffers.Builder, format flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(format), 0)
}
func ImageEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
